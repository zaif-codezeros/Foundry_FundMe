// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	pkgtypes "github.com/smartcontractkit/chainlink-common/pkg/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-evm/pkg/types"
)

// Workflow is an autogenerated mock type for the Workflow type
type Workflow struct {
	mock.Mock
}

type Workflow_Expecter struct {
	mock *mock.Mock
}

func (_m *Workflow) EXPECT() *Workflow_Expecter {
	return &Workflow_Expecter{mock: &_m.Mock}
}

// AcceptanceTimeout provides a mock function with no fields
func (_m *Workflow) AcceptanceTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AcceptanceTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Workflow_AcceptanceTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptanceTimeout'
type Workflow_AcceptanceTimeout_Call struct {
	*mock.Call
}

// AcceptanceTimeout is a helper method to define mock.On call
func (_e *Workflow_Expecter) AcceptanceTimeout() *Workflow_AcceptanceTimeout_Call {
	return &Workflow_AcceptanceTimeout_Call{Call: _e.mock.On("AcceptanceTimeout")}
}

func (_c *Workflow_AcceptanceTimeout_Call) Run(run func()) *Workflow_AcceptanceTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_AcceptanceTimeout_Call) Return(_a0 time.Duration) *Workflow_AcceptanceTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_AcceptanceTimeout_Call) RunAndReturn(run func() time.Duration) *Workflow_AcceptanceTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// ForwarderAddress provides a mock function with no fields
func (_m *Workflow) ForwarderAddress() *types.EIP55Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ForwarderAddress")
	}

	var r0 *types.EIP55Address
	if rf, ok := ret.Get(0).(func() *types.EIP55Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EIP55Address)
		}
	}

	return r0
}

// Workflow_ForwarderAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwarderAddress'
type Workflow_ForwarderAddress_Call struct {
	*mock.Call
}

// ForwarderAddress is a helper method to define mock.On call
func (_e *Workflow_Expecter) ForwarderAddress() *Workflow_ForwarderAddress_Call {
	return &Workflow_ForwarderAddress_Call{Call: _e.mock.On("ForwarderAddress")}
}

func (_c *Workflow_ForwarderAddress_Call) Run(run func()) *Workflow_ForwarderAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_ForwarderAddress_Call) Return(_a0 *types.EIP55Address) *Workflow_ForwarderAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_ForwarderAddress_Call) RunAndReturn(run func() *types.EIP55Address) *Workflow_ForwarderAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FromAddress provides a mock function with no fields
func (_m *Workflow) FromAddress() *types.EIP55Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FromAddress")
	}

	var r0 *types.EIP55Address
	if rf, ok := ret.Get(0).(func() *types.EIP55Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.EIP55Address)
		}
	}

	return r0
}

// Workflow_FromAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromAddress'
type Workflow_FromAddress_Call struct {
	*mock.Call
}

// FromAddress is a helper method to define mock.On call
func (_e *Workflow_Expecter) FromAddress() *Workflow_FromAddress_Call {
	return &Workflow_FromAddress_Call{Call: _e.mock.On("FromAddress")}
}

func (_c *Workflow_FromAddress_Call) Run(run func()) *Workflow_FromAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_FromAddress_Call) Return(_a0 *types.EIP55Address) *Workflow_FromAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_FromAddress_Call) RunAndReturn(run func() *types.EIP55Address) *Workflow_FromAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GasLimitDefault provides a mock function with no fields
func (_m *Workflow) GasLimitDefault() *uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasLimitDefault")
	}

	var r0 *uint64
	if rf, ok := ret.Get(0).(func() *uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint64)
		}
	}

	return r0
}

// Workflow_GasLimitDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasLimitDefault'
type Workflow_GasLimitDefault_Call struct {
	*mock.Call
}

// GasLimitDefault is a helper method to define mock.On call
func (_e *Workflow_Expecter) GasLimitDefault() *Workflow_GasLimitDefault_Call {
	return &Workflow_GasLimitDefault_Call{Call: _e.mock.On("GasLimitDefault")}
}

func (_c *Workflow_GasLimitDefault_Call) Run(run func()) *Workflow_GasLimitDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GasLimitDefault_Call) Return(_a0 *uint64) *Workflow_GasLimitDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GasLimitDefault_Call) RunAndReturn(run func() *uint64) *Workflow_GasLimitDefault_Call {
	_c.Call.Return(run)
	return _c
}

// PollPeriod provides a mock function with no fields
func (_m *Workflow) PollPeriod() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PollPeriod")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Workflow_PollPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollPeriod'
type Workflow_PollPeriod_Call struct {
	*mock.Call
}

// PollPeriod is a helper method to define mock.On call
func (_e *Workflow_Expecter) PollPeriod() *Workflow_PollPeriod_Call {
	return &Workflow_PollPeriod_Call{Call: _e.mock.On("PollPeriod")}
}

func (_c *Workflow_PollPeriod_Call) Run(run func()) *Workflow_PollPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_PollPeriod_Call) Return(_a0 time.Duration) *Workflow_PollPeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_PollPeriod_Call) RunAndReturn(run func() time.Duration) *Workflow_PollPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// TxAcceptanceState provides a mock function with no fields
func (_m *Workflow) TxAcceptanceState() *pkgtypes.TransactionStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxAcceptanceState")
	}

	var r0 *pkgtypes.TransactionStatus
	if rf, ok := ret.Get(0).(func() *pkgtypes.TransactionStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgtypes.TransactionStatus)
		}
	}

	return r0
}

// Workflow_TxAcceptanceState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxAcceptanceState'
type Workflow_TxAcceptanceState_Call struct {
	*mock.Call
}

// TxAcceptanceState is a helper method to define mock.On call
func (_e *Workflow_Expecter) TxAcceptanceState() *Workflow_TxAcceptanceState_Call {
	return &Workflow_TxAcceptanceState_Call{Call: _e.mock.On("TxAcceptanceState")}
}

func (_c *Workflow_TxAcceptanceState_Call) Run(run func()) *Workflow_TxAcceptanceState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_TxAcceptanceState_Call) Return(_a0 *pkgtypes.TransactionStatus) *Workflow_TxAcceptanceState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_TxAcceptanceState_Call) RunAndReturn(run func() *pkgtypes.TransactionStatus) *Workflow_TxAcceptanceState_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflow creates a new instance of Workflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Workflow {
	mock := &Workflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
