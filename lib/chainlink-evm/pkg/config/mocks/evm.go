// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	big "math/big"

	assets "github.com/smartcontractkit/chainlink-common/pkg/assets"

	chaintype "github.com/smartcontractkit/chainlink-evm/pkg/config/chaintype"

	config "github.com/smartcontractkit/chainlink-evm/pkg/config"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// EVM is an autogenerated mock type for the EVM type
type EVM struct {
	mock.Mock
}

type EVM_Expecter struct {
	mock *mock.Mock
}

func (_m *EVM) EXPECT() *EVM_Expecter {
	return &EVM_Expecter{mock: &_m.Mock}
}

// AutoCreateKey provides a mock function with no fields
func (_m *EVM) AutoCreateKey() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AutoCreateKey")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_AutoCreateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoCreateKey'
type EVM_AutoCreateKey_Call struct {
	*mock.Call
}

// AutoCreateKey is a helper method to define mock.On call
func (_e *EVM_Expecter) AutoCreateKey() *EVM_AutoCreateKey_Call {
	return &EVM_AutoCreateKey_Call{Call: _e.mock.On("AutoCreateKey")}
}

func (_c *EVM_AutoCreateKey_Call) Run(run func()) *EVM_AutoCreateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_AutoCreateKey_Call) Return(_a0 bool) *EVM_AutoCreateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_AutoCreateKey_Call) RunAndReturn(run func() bool) *EVM_AutoCreateKey_Call {
	_c.Call.Return(run)
	return _c
}

// BackupLogPollerBlockDelay provides a mock function with no fields
func (_m *EVM) BackupLogPollerBlockDelay() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BackupLogPollerBlockDelay")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EVM_BackupLogPollerBlockDelay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupLogPollerBlockDelay'
type EVM_BackupLogPollerBlockDelay_Call struct {
	*mock.Call
}

// BackupLogPollerBlockDelay is a helper method to define mock.On call
func (_e *EVM_Expecter) BackupLogPollerBlockDelay() *EVM_BackupLogPollerBlockDelay_Call {
	return &EVM_BackupLogPollerBlockDelay_Call{Call: _e.mock.On("BackupLogPollerBlockDelay")}
}

func (_c *EVM_BackupLogPollerBlockDelay_Call) Run(run func()) *EVM_BackupLogPollerBlockDelay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_BackupLogPollerBlockDelay_Call) Return(_a0 uint64) *EVM_BackupLogPollerBlockDelay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_BackupLogPollerBlockDelay_Call) RunAndReturn(run func() uint64) *EVM_BackupLogPollerBlockDelay_Call {
	_c.Call.Return(run)
	return _c
}

// BalanceMonitor provides a mock function with no fields
func (_m *EVM) BalanceMonitor() config.BalanceMonitor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BalanceMonitor")
	}

	var r0 config.BalanceMonitor
	if rf, ok := ret.Get(0).(func() config.BalanceMonitor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.BalanceMonitor)
		}
	}

	return r0
}

// EVM_BalanceMonitor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BalanceMonitor'
type EVM_BalanceMonitor_Call struct {
	*mock.Call
}

// BalanceMonitor is a helper method to define mock.On call
func (_e *EVM_Expecter) BalanceMonitor() *EVM_BalanceMonitor_Call {
	return &EVM_BalanceMonitor_Call{Call: _e.mock.On("BalanceMonitor")}
}

func (_c *EVM_BalanceMonitor_Call) Run(run func()) *EVM_BalanceMonitor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_BalanceMonitor_Call) Return(_a0 config.BalanceMonitor) *EVM_BalanceMonitor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_BalanceMonitor_Call) RunAndReturn(run func() config.BalanceMonitor) *EVM_BalanceMonitor_Call {
	_c.Call.Return(run)
	return _c
}

// BlockBackfillDepth provides a mock function with no fields
func (_m *EVM) BlockBackfillDepth() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockBackfillDepth")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EVM_BlockBackfillDepth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockBackfillDepth'
type EVM_BlockBackfillDepth_Call struct {
	*mock.Call
}

// BlockBackfillDepth is a helper method to define mock.On call
func (_e *EVM_Expecter) BlockBackfillDepth() *EVM_BlockBackfillDepth_Call {
	return &EVM_BlockBackfillDepth_Call{Call: _e.mock.On("BlockBackfillDepth")}
}

func (_c *EVM_BlockBackfillDepth_Call) Run(run func()) *EVM_BlockBackfillDepth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_BlockBackfillDepth_Call) Return(_a0 uint64) *EVM_BlockBackfillDepth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_BlockBackfillDepth_Call) RunAndReturn(run func() uint64) *EVM_BlockBackfillDepth_Call {
	_c.Call.Return(run)
	return _c
}

// BlockBackfillSkip provides a mock function with no fields
func (_m *EVM) BlockBackfillSkip() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockBackfillSkip")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_BlockBackfillSkip_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockBackfillSkip'
type EVM_BlockBackfillSkip_Call struct {
	*mock.Call
}

// BlockBackfillSkip is a helper method to define mock.On call
func (_e *EVM_Expecter) BlockBackfillSkip() *EVM_BlockBackfillSkip_Call {
	return &EVM_BlockBackfillSkip_Call{Call: _e.mock.On("BlockBackfillSkip")}
}

func (_c *EVM_BlockBackfillSkip_Call) Run(run func()) *EVM_BlockBackfillSkip_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_BlockBackfillSkip_Call) Return(_a0 bool) *EVM_BlockBackfillSkip_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_BlockBackfillSkip_Call) RunAndReturn(run func() bool) *EVM_BlockBackfillSkip_Call {
	_c.Call.Return(run)
	return _c
}

// BlockEmissionIdleWarningThreshold provides a mock function with no fields
func (_m *EVM) BlockEmissionIdleWarningThreshold() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockEmissionIdleWarningThreshold")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EVM_BlockEmissionIdleWarningThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockEmissionIdleWarningThreshold'
type EVM_BlockEmissionIdleWarningThreshold_Call struct {
	*mock.Call
}

// BlockEmissionIdleWarningThreshold is a helper method to define mock.On call
func (_e *EVM_Expecter) BlockEmissionIdleWarningThreshold() *EVM_BlockEmissionIdleWarningThreshold_Call {
	return &EVM_BlockEmissionIdleWarningThreshold_Call{Call: _e.mock.On("BlockEmissionIdleWarningThreshold")}
}

func (_c *EVM_BlockEmissionIdleWarningThreshold_Call) Run(run func()) *EVM_BlockEmissionIdleWarningThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_BlockEmissionIdleWarningThreshold_Call) Return(_a0 time.Duration) *EVM_BlockEmissionIdleWarningThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_BlockEmissionIdleWarningThreshold_Call) RunAndReturn(run func() time.Duration) *EVM_BlockEmissionIdleWarningThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// ChainID provides a mock function with no fields
func (_m *EVM) ChainID() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// EVM_ChainID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainID'
type EVM_ChainID_Call struct {
	*mock.Call
}

// ChainID is a helper method to define mock.On call
func (_e *EVM_Expecter) ChainID() *EVM_ChainID_Call {
	return &EVM_ChainID_Call{Call: _e.mock.On("ChainID")}
}

func (_c *EVM_ChainID_Call) Run(run func()) *EVM_ChainID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_ChainID_Call) Return(_a0 *big.Int) *EVM_ChainID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_ChainID_Call) RunAndReturn(run func() *big.Int) *EVM_ChainID_Call {
	_c.Call.Return(run)
	return _c
}

// ChainType provides a mock function with no fields
func (_m *EVM) ChainType() chaintype.ChainType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ChainType")
	}

	var r0 chaintype.ChainType
	if rf, ok := ret.Get(0).(func() chaintype.ChainType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chaintype.ChainType)
	}

	return r0
}

// EVM_ChainType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChainType'
type EVM_ChainType_Call struct {
	*mock.Call
}

// ChainType is a helper method to define mock.On call
func (_e *EVM_Expecter) ChainType() *EVM_ChainType_Call {
	return &EVM_ChainType_Call{Call: _e.mock.On("ChainType")}
}

func (_c *EVM_ChainType_Call) Run(run func()) *EVM_ChainType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_ChainType_Call) Return(_a0 chaintype.ChainType) *EVM_ChainType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_ChainType_Call) RunAndReturn(run func() chaintype.ChainType) *EVM_ChainType_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmationTimeout provides a mock function with no fields
func (_m *EVM) ConfirmationTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfirmationTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EVM_ConfirmationTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmationTimeout'
type EVM_ConfirmationTimeout_Call struct {
	*mock.Call
}

// ConfirmationTimeout is a helper method to define mock.On call
func (_e *EVM_Expecter) ConfirmationTimeout() *EVM_ConfirmationTimeout_Call {
	return &EVM_ConfirmationTimeout_Call{Call: _e.mock.On("ConfirmationTimeout")}
}

func (_c *EVM_ConfirmationTimeout_Call) Run(run func()) *EVM_ConfirmationTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_ConfirmationTimeout_Call) Return(_a0 time.Duration) *EVM_ConfirmationTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_ConfirmationTimeout_Call) RunAndReturn(run func() time.Duration) *EVM_ConfirmationTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// FinalityDepth provides a mock function with no fields
func (_m *EVM) FinalityDepth() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalityDepth")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_FinalityDepth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalityDepth'
type EVM_FinalityDepth_Call struct {
	*mock.Call
}

// FinalityDepth is a helper method to define mock.On call
func (_e *EVM_Expecter) FinalityDepth() *EVM_FinalityDepth_Call {
	return &EVM_FinalityDepth_Call{Call: _e.mock.On("FinalityDepth")}
}

func (_c *EVM_FinalityDepth_Call) Run(run func()) *EVM_FinalityDepth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_FinalityDepth_Call) Return(_a0 uint32) *EVM_FinalityDepth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_FinalityDepth_Call) RunAndReturn(run func() uint32) *EVM_FinalityDepth_Call {
	_c.Call.Return(run)
	return _c
}

// FinalityTagEnabled provides a mock function with no fields
func (_m *EVM) FinalityTagEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalityTagEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_FinalityTagEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalityTagEnabled'
type EVM_FinalityTagEnabled_Call struct {
	*mock.Call
}

// FinalityTagEnabled is a helper method to define mock.On call
func (_e *EVM_Expecter) FinalityTagEnabled() *EVM_FinalityTagEnabled_Call {
	return &EVM_FinalityTagEnabled_Call{Call: _e.mock.On("FinalityTagEnabled")}
}

func (_c *EVM_FinalityTagEnabled_Call) Run(run func()) *EVM_FinalityTagEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_FinalityTagEnabled_Call) Return(_a0 bool) *EVM_FinalityTagEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_FinalityTagEnabled_Call) RunAndReturn(run func() bool) *EVM_FinalityTagEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizedBlockOffset provides a mock function with no fields
func (_m *EVM) FinalizedBlockOffset() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizedBlockOffset")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_FinalizedBlockOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizedBlockOffset'
type EVM_FinalizedBlockOffset_Call struct {
	*mock.Call
}

// FinalizedBlockOffset is a helper method to define mock.On call
func (_e *EVM_Expecter) FinalizedBlockOffset() *EVM_FinalizedBlockOffset_Call {
	return &EVM_FinalizedBlockOffset_Call{Call: _e.mock.On("FinalizedBlockOffset")}
}

func (_c *EVM_FinalizedBlockOffset_Call) Run(run func()) *EVM_FinalizedBlockOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_FinalizedBlockOffset_Call) Return(_a0 uint32) *EVM_FinalizedBlockOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_FinalizedBlockOffset_Call) RunAndReturn(run func() uint32) *EVM_FinalizedBlockOffset_Call {
	_c.Call.Return(run)
	return _c
}

// FlagsContractAddress provides a mock function with no fields
func (_m *EVM) FlagsContractAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlagsContractAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EVM_FlagsContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlagsContractAddress'
type EVM_FlagsContractAddress_Call struct {
	*mock.Call
}

// FlagsContractAddress is a helper method to define mock.On call
func (_e *EVM_Expecter) FlagsContractAddress() *EVM_FlagsContractAddress_Call {
	return &EVM_FlagsContractAddress_Call{Call: _e.mock.On("FlagsContractAddress")}
}

func (_c *EVM_FlagsContractAddress_Call) Run(run func()) *EVM_FlagsContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_FlagsContractAddress_Call) Return(_a0 string) *EVM_FlagsContractAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_FlagsContractAddress_Call) RunAndReturn(run func() string) *EVM_FlagsContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GasEstimator provides a mock function with no fields
func (_m *EVM) GasEstimator() config.GasEstimator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GasEstimator")
	}

	var r0 config.GasEstimator
	if rf, ok := ret.Get(0).(func() config.GasEstimator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.GasEstimator)
		}
	}

	return r0
}

// EVM_GasEstimator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GasEstimator'
type EVM_GasEstimator_Call struct {
	*mock.Call
}

// GasEstimator is a helper method to define mock.On call
func (_e *EVM_Expecter) GasEstimator() *EVM_GasEstimator_Call {
	return &EVM_GasEstimator_Call{Call: _e.mock.On("GasEstimator")}
}

func (_c *EVM_GasEstimator_Call) Run(run func()) *EVM_GasEstimator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_GasEstimator_Call) Return(_a0 config.GasEstimator) *EVM_GasEstimator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_GasEstimator_Call) RunAndReturn(run func() config.GasEstimator) *EVM_GasEstimator_Call {
	_c.Call.Return(run)
	return _c
}

// HeadTracker provides a mock function with no fields
func (_m *EVM) HeadTracker() config.HeadTracker {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HeadTracker")
	}

	var r0 config.HeadTracker
	if rf, ok := ret.Get(0).(func() config.HeadTracker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.HeadTracker)
		}
	}

	return r0
}

// EVM_HeadTracker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadTracker'
type EVM_HeadTracker_Call struct {
	*mock.Call
}

// HeadTracker is a helper method to define mock.On call
func (_e *EVM_Expecter) HeadTracker() *EVM_HeadTracker_Call {
	return &EVM_HeadTracker_Call{Call: _e.mock.On("HeadTracker")}
}

func (_c *EVM_HeadTracker_Call) Run(run func()) *EVM_HeadTracker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_HeadTracker_Call) Return(_a0 config.HeadTracker) *EVM_HeadTracker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_HeadTracker_Call) RunAndReturn(run func() config.HeadTracker) *EVM_HeadTracker_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function with no fields
func (_m *EVM) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type EVM_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *EVM_Expecter) IsEnabled() *EVM_IsEnabled_Call {
	return &EVM_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *EVM_IsEnabled_Call) Run(run func()) *EVM_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_IsEnabled_Call) Return(_a0 bool) *EVM_IsEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_IsEnabled_Call) RunAndReturn(run func() bool) *EVM_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// LinkContractAddress provides a mock function with no fields
func (_m *EVM) LinkContractAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LinkContractAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EVM_LinkContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkContractAddress'
type EVM_LinkContractAddress_Call struct {
	*mock.Call
}

// LinkContractAddress is a helper method to define mock.On call
func (_e *EVM_Expecter) LinkContractAddress() *EVM_LinkContractAddress_Call {
	return &EVM_LinkContractAddress_Call{Call: _e.mock.On("LinkContractAddress")}
}

func (_c *EVM_LinkContractAddress_Call) Run(run func()) *EVM_LinkContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LinkContractAddress_Call) Return(_a0 string) *EVM_LinkContractAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LinkContractAddress_Call) RunAndReturn(run func() string) *EVM_LinkContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// LogBackfillBatchSize provides a mock function with no fields
func (_m *EVM) LogBackfillBatchSize() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogBackfillBatchSize")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_LogBackfillBatchSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogBackfillBatchSize'
type EVM_LogBackfillBatchSize_Call struct {
	*mock.Call
}

// LogBackfillBatchSize is a helper method to define mock.On call
func (_e *EVM_Expecter) LogBackfillBatchSize() *EVM_LogBackfillBatchSize_Call {
	return &EVM_LogBackfillBatchSize_Call{Call: _e.mock.On("LogBackfillBatchSize")}
}

func (_c *EVM_LogBackfillBatchSize_Call) Run(run func()) *EVM_LogBackfillBatchSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LogBackfillBatchSize_Call) Return(_a0 uint32) *EVM_LogBackfillBatchSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LogBackfillBatchSize_Call) RunAndReturn(run func() uint32) *EVM_LogBackfillBatchSize_Call {
	_c.Call.Return(run)
	return _c
}

// LogBroadcasterEnabled provides a mock function with no fields
func (_m *EVM) LogBroadcasterEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogBroadcasterEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_LogBroadcasterEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogBroadcasterEnabled'
type EVM_LogBroadcasterEnabled_Call struct {
	*mock.Call
}

// LogBroadcasterEnabled is a helper method to define mock.On call
func (_e *EVM_Expecter) LogBroadcasterEnabled() *EVM_LogBroadcasterEnabled_Call {
	return &EVM_LogBroadcasterEnabled_Call{Call: _e.mock.On("LogBroadcasterEnabled")}
}

func (_c *EVM_LogBroadcasterEnabled_Call) Run(run func()) *EVM_LogBroadcasterEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LogBroadcasterEnabled_Call) Return(_a0 bool) *EVM_LogBroadcasterEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LogBroadcasterEnabled_Call) RunAndReturn(run func() bool) *EVM_LogBroadcasterEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// LogKeepBlocksDepth provides a mock function with no fields
func (_m *EVM) LogKeepBlocksDepth() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogKeepBlocksDepth")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_LogKeepBlocksDepth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogKeepBlocksDepth'
type EVM_LogKeepBlocksDepth_Call struct {
	*mock.Call
}

// LogKeepBlocksDepth is a helper method to define mock.On call
func (_e *EVM_Expecter) LogKeepBlocksDepth() *EVM_LogKeepBlocksDepth_Call {
	return &EVM_LogKeepBlocksDepth_Call{Call: _e.mock.On("LogKeepBlocksDepth")}
}

func (_c *EVM_LogKeepBlocksDepth_Call) Run(run func()) *EVM_LogKeepBlocksDepth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LogKeepBlocksDepth_Call) Return(_a0 uint32) *EVM_LogKeepBlocksDepth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LogKeepBlocksDepth_Call) RunAndReturn(run func() uint32) *EVM_LogKeepBlocksDepth_Call {
	_c.Call.Return(run)
	return _c
}

// LogPollInterval provides a mock function with no fields
func (_m *EVM) LogPollInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogPollInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EVM_LogPollInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPollInterval'
type EVM_LogPollInterval_Call struct {
	*mock.Call
}

// LogPollInterval is a helper method to define mock.On call
func (_e *EVM_Expecter) LogPollInterval() *EVM_LogPollInterval_Call {
	return &EVM_LogPollInterval_Call{Call: _e.mock.On("LogPollInterval")}
}

func (_c *EVM_LogPollInterval_Call) Run(run func()) *EVM_LogPollInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LogPollInterval_Call) Return(_a0 time.Duration) *EVM_LogPollInterval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LogPollInterval_Call) RunAndReturn(run func() time.Duration) *EVM_LogPollInterval_Call {
	_c.Call.Return(run)
	return _c
}

// LogPrunePageSize provides a mock function with no fields
func (_m *EVM) LogPrunePageSize() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogPrunePageSize")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_LogPrunePageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogPrunePageSize'
type EVM_LogPrunePageSize_Call struct {
	*mock.Call
}

// LogPrunePageSize is a helper method to define mock.On call
func (_e *EVM_Expecter) LogPrunePageSize() *EVM_LogPrunePageSize_Call {
	return &EVM_LogPrunePageSize_Call{Call: _e.mock.On("LogPrunePageSize")}
}

func (_c *EVM_LogPrunePageSize_Call) Run(run func()) *EVM_LogPrunePageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_LogPrunePageSize_Call) Return(_a0 uint32) *EVM_LogPrunePageSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_LogPrunePageSize_Call) RunAndReturn(run func() uint32) *EVM_LogPrunePageSize_Call {
	_c.Call.Return(run)
	return _c
}

// MinContractPayment provides a mock function with no fields
func (_m *EVM) MinContractPayment() *assets.Link {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinContractPayment")
	}

	var r0 *assets.Link
	if rf, ok := ret.Get(0).(func() *assets.Link); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assets.Link)
		}
	}

	return r0
}

// EVM_MinContractPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MinContractPayment'
type EVM_MinContractPayment_Call struct {
	*mock.Call
}

// MinContractPayment is a helper method to define mock.On call
func (_e *EVM_Expecter) MinContractPayment() *EVM_MinContractPayment_Call {
	return &EVM_MinContractPayment_Call{Call: _e.mock.On("MinContractPayment")}
}

func (_c *EVM_MinContractPayment_Call) Run(run func()) *EVM_MinContractPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_MinContractPayment_Call) Return(_a0 *assets.Link) *EVM_MinContractPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_MinContractPayment_Call) RunAndReturn(run func() *assets.Link) *EVM_MinContractPayment_Call {
	_c.Call.Return(run)
	return _c
}

// MinIncomingConfirmations provides a mock function with no fields
func (_m *EVM) MinIncomingConfirmations() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MinIncomingConfirmations")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_MinIncomingConfirmations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MinIncomingConfirmations'
type EVM_MinIncomingConfirmations_Call struct {
	*mock.Call
}

// MinIncomingConfirmations is a helper method to define mock.On call
func (_e *EVM_Expecter) MinIncomingConfirmations() *EVM_MinIncomingConfirmations_Call {
	return &EVM_MinIncomingConfirmations_Call{Call: _e.mock.On("MinIncomingConfirmations")}
}

func (_c *EVM_MinIncomingConfirmations_Call) Run(run func()) *EVM_MinIncomingConfirmations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_MinIncomingConfirmations_Call) Return(_a0 uint32) *EVM_MinIncomingConfirmations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_MinIncomingConfirmations_Call) RunAndReturn(run func() uint32) *EVM_MinIncomingConfirmations_Call {
	_c.Call.Return(run)
	return _c
}

// NoNewFinalizedHeadsThreshold provides a mock function with no fields
func (_m *EVM) NoNewFinalizedHeadsThreshold() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NoNewFinalizedHeadsThreshold")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EVM_NoNewFinalizedHeadsThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoNewFinalizedHeadsThreshold'
type EVM_NoNewFinalizedHeadsThreshold_Call struct {
	*mock.Call
}

// NoNewFinalizedHeadsThreshold is a helper method to define mock.On call
func (_e *EVM_Expecter) NoNewFinalizedHeadsThreshold() *EVM_NoNewFinalizedHeadsThreshold_Call {
	return &EVM_NoNewFinalizedHeadsThreshold_Call{Call: _e.mock.On("NoNewFinalizedHeadsThreshold")}
}

func (_c *EVM_NoNewFinalizedHeadsThreshold_Call) Run(run func()) *EVM_NoNewFinalizedHeadsThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_NoNewFinalizedHeadsThreshold_Call) Return(_a0 time.Duration) *EVM_NoNewFinalizedHeadsThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_NoNewFinalizedHeadsThreshold_Call) RunAndReturn(run func() time.Duration) *EVM_NoNewFinalizedHeadsThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// NodeNoNewHeadsThreshold provides a mock function with no fields
func (_m *EVM) NodeNoNewHeadsThreshold() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeNoNewHeadsThreshold")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// EVM_NodeNoNewHeadsThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeNoNewHeadsThreshold'
type EVM_NodeNoNewHeadsThreshold_Call struct {
	*mock.Call
}

// NodeNoNewHeadsThreshold is a helper method to define mock.On call
func (_e *EVM_Expecter) NodeNoNewHeadsThreshold() *EVM_NodeNoNewHeadsThreshold_Call {
	return &EVM_NodeNoNewHeadsThreshold_Call{Call: _e.mock.On("NodeNoNewHeadsThreshold")}
}

func (_c *EVM_NodeNoNewHeadsThreshold_Call) Run(run func()) *EVM_NodeNoNewHeadsThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_NodeNoNewHeadsThreshold_Call) Return(_a0 time.Duration) *EVM_NodeNoNewHeadsThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_NodeNoNewHeadsThreshold_Call) RunAndReturn(run func() time.Duration) *EVM_NodeNoNewHeadsThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// NodePool provides a mock function with no fields
func (_m *EVM) NodePool() config.NodePool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodePool")
	}

	var r0 config.NodePool
	if rf, ok := ret.Get(0).(func() config.NodePool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.NodePool)
		}
	}

	return r0
}

// EVM_NodePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodePool'
type EVM_NodePool_Call struct {
	*mock.Call
}

// NodePool is a helper method to define mock.On call
func (_e *EVM_Expecter) NodePool() *EVM_NodePool_Call {
	return &EVM_NodePool_Call{Call: _e.mock.On("NodePool")}
}

func (_c *EVM_NodePool_Call) Run(run func()) *EVM_NodePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_NodePool_Call) Return(_a0 config.NodePool) *EVM_NodePool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_NodePool_Call) RunAndReturn(run func() config.NodePool) *EVM_NodePool_Call {
	_c.Call.Return(run)
	return _c
}

// NonceAutoSync provides a mock function with no fields
func (_m *EVM) NonceAutoSync() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NonceAutoSync")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EVM_NonceAutoSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NonceAutoSync'
type EVM_NonceAutoSync_Call struct {
	*mock.Call
}

// NonceAutoSync is a helper method to define mock.On call
func (_e *EVM_Expecter) NonceAutoSync() *EVM_NonceAutoSync_Call {
	return &EVM_NonceAutoSync_Call{Call: _e.mock.On("NonceAutoSync")}
}

func (_c *EVM_NonceAutoSync_Call) Run(run func()) *EVM_NonceAutoSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_NonceAutoSync_Call) Return(_a0 bool) *EVM_NonceAutoSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_NonceAutoSync_Call) RunAndReturn(run func() bool) *EVM_NonceAutoSync_Call {
	_c.Call.Return(run)
	return _c
}

// OCR provides a mock function with no fields
func (_m *EVM) OCR() config.OCR {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OCR")
	}

	var r0 config.OCR
	if rf, ok := ret.Get(0).(func() config.OCR); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.OCR)
		}
	}

	return r0
}

// EVM_OCR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OCR'
type EVM_OCR_Call struct {
	*mock.Call
}

// OCR is a helper method to define mock.On call
func (_e *EVM_Expecter) OCR() *EVM_OCR_Call {
	return &EVM_OCR_Call{Call: _e.mock.On("OCR")}
}

func (_c *EVM_OCR_Call) Run(run func()) *EVM_OCR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_OCR_Call) Return(_a0 config.OCR) *EVM_OCR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_OCR_Call) RunAndReturn(run func() config.OCR) *EVM_OCR_Call {
	_c.Call.Return(run)
	return _c
}

// OCR2 provides a mock function with no fields
func (_m *EVM) OCR2() config.OCR2 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OCR2")
	}

	var r0 config.OCR2
	if rf, ok := ret.Get(0).(func() config.OCR2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.OCR2)
		}
	}

	return r0
}

// EVM_OCR2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OCR2'
type EVM_OCR2_Call struct {
	*mock.Call
}

// OCR2 is a helper method to define mock.On call
func (_e *EVM_Expecter) OCR2() *EVM_OCR2_Call {
	return &EVM_OCR2_Call{Call: _e.mock.On("OCR2")}
}

func (_c *EVM_OCR2_Call) Run(run func()) *EVM_OCR2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_OCR2_Call) Return(_a0 config.OCR2) *EVM_OCR2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_OCR2_Call) RunAndReturn(run func() config.OCR2) *EVM_OCR2_Call {
	_c.Call.Return(run)
	return _c
}

// OperatorFactoryAddress provides a mock function with no fields
func (_m *EVM) OperatorFactoryAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OperatorFactoryAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EVM_OperatorFactoryAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperatorFactoryAddress'
type EVM_OperatorFactoryAddress_Call struct {
	*mock.Call
}

// OperatorFactoryAddress is a helper method to define mock.On call
func (_e *EVM_Expecter) OperatorFactoryAddress() *EVM_OperatorFactoryAddress_Call {
	return &EVM_OperatorFactoryAddress_Call{Call: _e.mock.On("OperatorFactoryAddress")}
}

func (_c *EVM_OperatorFactoryAddress_Call) Run(run func()) *EVM_OperatorFactoryAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_OperatorFactoryAddress_Call) Return(_a0 string) *EVM_OperatorFactoryAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_OperatorFactoryAddress_Call) RunAndReturn(run func() string) *EVM_OperatorFactoryAddress_Call {
	_c.Call.Return(run)
	return _c
}

// RPCDefaultBatchSize provides a mock function with no fields
func (_m *EVM) RPCDefaultBatchSize() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCDefaultBatchSize")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_RPCDefaultBatchSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCDefaultBatchSize'
type EVM_RPCDefaultBatchSize_Call struct {
	*mock.Call
}

// RPCDefaultBatchSize is a helper method to define mock.On call
func (_e *EVM_Expecter) RPCDefaultBatchSize() *EVM_RPCDefaultBatchSize_Call {
	return &EVM_RPCDefaultBatchSize_Call{Call: _e.mock.On("RPCDefaultBatchSize")}
}

func (_c *EVM_RPCDefaultBatchSize_Call) Run(run func()) *EVM_RPCDefaultBatchSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_RPCDefaultBatchSize_Call) Return(_a0 uint32) *EVM_RPCDefaultBatchSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_RPCDefaultBatchSize_Call) RunAndReturn(run func() uint32) *EVM_RPCDefaultBatchSize_Call {
	_c.Call.Return(run)
	return _c
}

// SafeDepth provides a mock function with no fields
func (_m *EVM) SafeDepth() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SafeDepth")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// EVM_SafeDepth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SafeDepth'
type EVM_SafeDepth_Call struct {
	*mock.Call
}

// SafeDepth is a helper method to define mock.On call
func (_e *EVM_Expecter) SafeDepth() *EVM_SafeDepth_Call {
	return &EVM_SafeDepth_Call{Call: _e.mock.On("SafeDepth")}
}

func (_c *EVM_SafeDepth_Call) Run(run func()) *EVM_SafeDepth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_SafeDepth_Call) Return(_a0 uint32) *EVM_SafeDepth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_SafeDepth_Call) RunAndReturn(run func() uint32) *EVM_SafeDepth_Call {
	_c.Call.Return(run)
	return _c
}

// TOMLString provides a mock function with no fields
func (_m *EVM) TOMLString() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TOMLString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVM_TOMLString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TOMLString'
type EVM_TOMLString_Call struct {
	*mock.Call
}

// TOMLString is a helper method to define mock.On call
func (_e *EVM_Expecter) TOMLString() *EVM_TOMLString_Call {
	return &EVM_TOMLString_Call{Call: _e.mock.On("TOMLString")}
}

func (_c *EVM_TOMLString_Call) Run(run func()) *EVM_TOMLString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_TOMLString_Call) Return(_a0 string, _a1 error) *EVM_TOMLString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVM_TOMLString_Call) RunAndReturn(run func() (string, error)) *EVM_TOMLString_Call {
	_c.Call.Return(run)
	return _c
}

// Transactions provides a mock function with no fields
func (_m *EVM) Transactions() config.Transactions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Transactions")
	}

	var r0 config.Transactions
	if rf, ok := ret.Get(0).(func() config.Transactions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Transactions)
		}
	}

	return r0
}

// EVM_Transactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transactions'
type EVM_Transactions_Call struct {
	*mock.Call
}

// Transactions is a helper method to define mock.On call
func (_e *EVM_Expecter) Transactions() *EVM_Transactions_Call {
	return &EVM_Transactions_Call{Call: _e.mock.On("Transactions")}
}

func (_c *EVM_Transactions_Call) Run(run func()) *EVM_Transactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_Transactions_Call) Return(_a0 config.Transactions) *EVM_Transactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_Transactions_Call) RunAndReturn(run func() config.Transactions) *EVM_Transactions_Call {
	_c.Call.Return(run)
	return _c
}

// Workflow provides a mock function with no fields
func (_m *EVM) Workflow() config.Workflow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Workflow")
	}

	var r0 config.Workflow
	if rf, ok := ret.Get(0).(func() config.Workflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Workflow)
		}
	}

	return r0
}

// EVM_Workflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Workflow'
type EVM_Workflow_Call struct {
	*mock.Call
}

// Workflow is a helper method to define mock.On call
func (_e *EVM_Expecter) Workflow() *EVM_Workflow_Call {
	return &EVM_Workflow_Call{Call: _e.mock.On("Workflow")}
}

func (_c *EVM_Workflow_Call) Run(run func()) *EVM_Workflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EVM_Workflow_Call) Return(_a0 config.Workflow) *EVM_Workflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EVM_Workflow_Call) RunAndReturn(run func() config.Workflow) *EVM_Workflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewEVM creates a new instance of EVM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEVM(t interface {
	mock.TestingT
	Cleanup(func())
}) *EVM {
	mock := &EVM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
