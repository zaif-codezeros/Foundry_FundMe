// Code generated by mockery v2.53.3. DO NOT EDIT.

package txm

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockEmitter is an autogenerated mock type for the Emitter type
type mockEmitter struct {
	mock.Mock
}

type mockEmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEmitter) EXPECT() *mockEmitter_Expecter {
	return &mockEmitter_Expecter{mock: &_m.Mock}
}

// Emit provides a mock function with given fields: ctx, body, attrKVs
func (_m *mockEmitter) Emit(ctx context.Context, body []byte, attrKVs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, attrKVs...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Emit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, ...interface{}) error); ok {
		r0 = rf(ctx, body, attrKVs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEmitter_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type mockEmitter_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - ctx context.Context
//   - body []byte
//   - attrKVs ...interface{}
func (_e *mockEmitter_Expecter) Emit(ctx interface{}, body interface{}, attrKVs ...interface{}) *mockEmitter_Emit_Call {
	return &mockEmitter_Emit_Call{Call: _e.mock.On("Emit",
		append([]interface{}{ctx, body}, attrKVs...)...)}
}

func (_c *mockEmitter_Emit_Call) Run(run func(ctx context.Context, body []byte, attrKVs ...interface{})) *mockEmitter_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].([]byte), variadicArgs...)
	})
	return _c
}

func (_c *mockEmitter_Emit_Call) Return(_a0 error) *mockEmitter_Emit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEmitter_Emit_Call) RunAndReturn(run func(context.Context, []byte, ...interface{}) error) *mockEmitter_Emit_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEmitter creates a new instance of mockEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEmitter {
	mock := &mockEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
