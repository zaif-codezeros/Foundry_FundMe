// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	rand "math/rand"

	pb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	mock "github.com/stretchr/testify/mock"

	sdk "github.com/smartcontractkit/cre-sdk-go/sdk"

	values "github.com/smartcontractkit/chainlink-common/pkg/values"
)

// Runtime is an autogenerated mock type for the Runtime type
type Runtime struct {
	mock.Mock
}

type Runtime_Expecter struct {
	mock *mock.Mock
}

func (_m *Runtime) EXPECT() *Runtime_Expecter {
	return &Runtime_Expecter{mock: &_m.Mock}
}

// CallCapability provides a mock function with given fields: request
func (_m *Runtime) CallCapability(request *pb.CapabilityRequest) sdk.Promise[*pb.CapabilityResponse] {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CallCapability")
	}

	var r0 sdk.Promise[*pb.CapabilityResponse]
	if rf, ok := ret.Get(0).(func(*pb.CapabilityRequest) sdk.Promise[*pb.CapabilityResponse]); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sdk.Promise[*pb.CapabilityResponse])
		}
	}

	return r0
}

// Runtime_CallCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallCapability'
type Runtime_CallCapability_Call struct {
	*mock.Call
}

// CallCapability is a helper method to define mock.On call
//   - request *pb.CapabilityRequest
func (_e *Runtime_Expecter) CallCapability(request interface{}) *Runtime_CallCapability_Call {
	return &Runtime_CallCapability_Call{Call: _e.mock.On("CallCapability", request)}
}

func (_c *Runtime_CallCapability_Call) Run(run func(request *pb.CapabilityRequest)) *Runtime_CallCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.CapabilityRequest))
	})
	return _c
}

func (_c *Runtime_CallCapability_Call) Return(_a0 sdk.Promise[*pb.CapabilityResponse]) *Runtime_CallCapability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runtime_CallCapability_Call) RunAndReturn(run func(*pb.CapabilityRequest) sdk.Promise[*pb.CapabilityResponse]) *Runtime_CallCapability_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateReport provides a mock function with given fields: _a0
func (_m *Runtime) GenerateReport(_a0 *pb.ReportRequest) sdk.Promise[*pb.ReportResponse] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReport")
	}

	var r0 sdk.Promise[*pb.ReportResponse]
	if rf, ok := ret.Get(0).(func(*pb.ReportRequest) sdk.Promise[*pb.ReportResponse]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sdk.Promise[*pb.ReportResponse])
		}
	}

	return r0
}

// Runtime_GenerateReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateReport'
type Runtime_GenerateReport_Call struct {
	*mock.Call
}

// GenerateReport is a helper method to define mock.On call
//   - _a0 *pb.ReportRequest
func (_e *Runtime_Expecter) GenerateReport(_a0 interface{}) *Runtime_GenerateReport_Call {
	return &Runtime_GenerateReport_Call{Call: _e.mock.On("GenerateReport", _a0)}
}

func (_c *Runtime_GenerateReport_Call) Run(run func(_a0 *pb.ReportRequest)) *Runtime_GenerateReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.ReportRequest))
	})
	return _c
}

func (_c *Runtime_GenerateReport_Call) Return(_a0 sdk.Promise[*pb.ReportResponse]) *Runtime_GenerateReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runtime_GenerateReport_Call) RunAndReturn(run func(*pb.ReportRequest) sdk.Promise[*pb.ReportResponse]) *Runtime_GenerateReport_Call {
	_c.Call.Return(run)
	return _c
}

// Rand provides a mock function with no fields
func (_m *Runtime) Rand() (*rand.Rand, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rand")
	}

	var r0 *rand.Rand
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rand.Rand, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rand.Rand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rand.Rand)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Runtime_Rand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rand'
type Runtime_Rand_Call struct {
	*mock.Call
}

// Rand is a helper method to define mock.On call
func (_e *Runtime_Expecter) Rand() *Runtime_Rand_Call {
	return &Runtime_Rand_Call{Call: _e.mock.On("Rand")}
}

func (_c *Runtime_Rand_Call) Run(run func()) *Runtime_Rand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Runtime_Rand_Call) Return(_a0 *rand.Rand, _a1 error) *Runtime_Rand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Runtime_Rand_Call) RunAndReturn(run func() (*rand.Rand, error)) *Runtime_Rand_Call {
	_c.Call.Return(run)
	return _c
}

// RunInNodeMode provides a mock function with given fields: fn
func (_m *Runtime) RunInNodeMode(fn func(sdk.NodeRuntime) *pb.SimpleConsensusInputs) sdk.Promise[values.Value] {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RunInNodeMode")
	}

	var r0 sdk.Promise[values.Value]
	if rf, ok := ret.Get(0).(func(func(sdk.NodeRuntime) *pb.SimpleConsensusInputs) sdk.Promise[values.Value]); ok {
		r0 = rf(fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sdk.Promise[values.Value])
		}
	}

	return r0
}

// Runtime_RunInNodeMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInNodeMode'
type Runtime_RunInNodeMode_Call struct {
	*mock.Call
}

// RunInNodeMode is a helper method to define mock.On call
//   - fn func(sdk.NodeRuntime) *pb.SimpleConsensusInputs
func (_e *Runtime_Expecter) RunInNodeMode(fn interface{}) *Runtime_RunInNodeMode_Call {
	return &Runtime_RunInNodeMode_Call{Call: _e.mock.On("RunInNodeMode", fn)}
}

func (_c *Runtime_RunInNodeMode_Call) Run(run func(fn func(sdk.NodeRuntime) *pb.SimpleConsensusInputs)) *Runtime_RunInNodeMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(sdk.NodeRuntime) *pb.SimpleConsensusInputs))
	})
	return _c
}

func (_c *Runtime_RunInNodeMode_Call) Return(_a0 sdk.Promise[values.Value]) *Runtime_RunInNodeMode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Runtime_RunInNodeMode_Call) RunAndReturn(run func(func(sdk.NodeRuntime) *pb.SimpleConsensusInputs) sdk.Promise[values.Value]) *Runtime_RunInNodeMode_Call {
	_c.Call.Return(run)
	return _c
}

// NewRuntime creates a new instance of Runtime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRuntime(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runtime {
	mock := &Runtime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
